---
AWSTemplateFormatVersion: "2010-09-09"

Description: >
  Mikias Hundie
  Udacity Project Deploy a High-Availability Web App using CloudFormation

Parameters:
  # whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
  MyEnvironmentName:
    Description: An Environment name that will be prefixed to resources
    Type: String

  MysubnetAZ1:
    Description: Select an Availability Zone
    Type: String
    Default: us-east-1a
    AllowedValues:
      - us-east-1a
      - us-east-1b
      - us-east-1c

  MysubnetAZ2:
    Description: Select an Availability Zone
    Type: String
    Default: us-east-1d
    AllowedValues:
      - us-east-1d
      - us-east-1e
      - us-east-1f

  # MyInstanceType:
  #   Description: Select an EC2 Instance Type
  #   Type: String
  #   Default: t3.small
  #   AllowedValues:
  #     - t3.small
  #     - t2.medium
  #     - t2.small

  MyVpc:
    Description: VPC CIDR block 10.0.0.0/16 = 10.0.0.0-10.0.255.255 = 256 Subnets = 65534 hosts.
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  MyPublicSubnet1:
    Description: Public Subnet 1 CIDR block
    Type: String
    Default: 10.0.0.0/24 
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and subnet of VPC

  MyPublicSubnet2:
    Description: Public Subnet 2 CIDR block
    Type: String
    Default: 10.0.1.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and subnet of VPC

  MyPrivateSubnet1:
    Description: Private Subnet 1 CIDR block
    Type: String
    Default: 10.0.2.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and subnet of VPC

  MyPrivateSubnet2:
    Description: Private Subnet 1 CIDR block
    Type: String
    Default: 10.0.3.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x and subnet of VPC

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref MyVpc
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
        - Key: Name
          Value: !Ref MyEnvironmentName

  IntGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn:
      - VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Ref MyEnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - VPC
      - IntGateway
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IntGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPC
      - InternetGatewayAttachment
    Properties:
      CidrBlock: !Ref MyPublicSubnet1
      AvailabilityZone: !Ref MysubnetAZ1
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${MyEnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPC
      - InternetGatewayAttachment
    Properties:
      CidrBlock: !Ref MyPublicSubnet2
      AvailabilityZone: !Ref MysubnetAZ2
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${MyEnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPC
      - InternetGatewayAttachment
    Properties:
      CidrBlock: !Ref MyPrivateSubnet1
      AvailabilityZone: !Ref MysubnetAZ1
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${MyEnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPC
      - InternetGatewayAttachment
    Properties:
      CidrBlock: !Ref MyPrivateSubnet2
      AvailabilityZone: !Ref MysubnetAZ2
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${MyEnvironmentName} Private Subnet (AZ2)

  NatGatewayEIPAZ1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn:
      - InternetGatewayAttachment

  NatGatewayAZ1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIPAZ1.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGatewayEIPAZ2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn:
      - InternetGatewayAttachment

  NatGatewayAZ2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIPAZ2.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC 
      Tags:
       - Key: Name 
         Value: !Sub ${MyEnvironmentName}-Public Routes
  
  RoutePublic:
    Type: AWS::EC2::Route
    DependsOn:
      - PublicRouteTable
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref IntGateway

  SubnetRouteTableAssociationPublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet1
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  SubnetRouteTableAssociationPublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet2
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC 
      Tags:
       - Key: Name 
         Value: !Sub ${MyEnvironmentName}-Private Routes

  SubnetRouteTableAssociationPrivate1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateRouteTable
      - PrivateSubnet1
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1 

  SubnetRouteTableAssociationPrivate2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateRouteTable
      - PrivateSubnet2
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2 

Outputs:
  #Bonus points for useful outputs!
  VPC:
    Description: VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${MyEnvironmentName}-VPCID

  MysubnetAZ1:
    Description: Availability Zone 1
    Value: !GetAtt PublicSubnet1.AvailabilityZone

  MysubnetAZ2:
   Description: Availability Zone 2
   Value: !GetAtt PublicSubnet2.AvailabilityZone

  PublicSubnets:
    Description: Public Subnets Created for VPC
    Value: !Join [",",[ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: !Sub ${MyEnvironmentName}-PUB-SNETS 

  PrivateSubnets:
    Description: Private Subnets Created for VPC
    Value: !Join [",",[ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    Export:
      Name: !Sub ${MyEnvironmentName}-PRI-SNETS 

  PublicRouteTable:
    Description: Public Route Table Created for VPC
    Value: !Ref PublicRouteTable 

  PrivateRouteTable:
    Description: Private Route Table Created for VPC 
    Value: !Ref PrivateRouteTable 

  MyPublicSubnet1:
    Description: Public Subnet IDs Created for VPC 
    Value: !Ref MyPublicSubnet1

  MyPublicSubnet2:
    Description: Public Subnet IDs Created for VPC 
    Value: !Ref MyPublicSubnet2 

  MyPrivateSubnet1:
    Description: Private Subnet IDs Created for VPC 
    Value: !Ref MyPrivateSubnet1

  MyPrivateSubnet2:
    Description: Private Subnet IDs Created for VPC 
    Value: !Ref MyPrivateSubnet2